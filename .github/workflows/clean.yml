name: Clean BPB Clash

on:
  schedule:
    - cron: "0 */6 * * *"   # 每6小时运行一次
  workflow_dispatch:         # 手动触发

jobs:
  clean-bpb:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install pyyaml requests

      - name: Clean BPB Clash subscription
        env:
          BPB_SUB_URL: ${{ secrets.BPB_SUB_URL }}
        run: |
          python3 <<'PYCODE'
          import os
          import requests
          import yaml

          BPB_SUB_URL = os.environ.get("BPB_SUB_URL")
          if not BPB_SUB_URL:
              raise ValueError("请设置环境变量 BPB_SUB_URL")

          # 拉取 BPB Clash 订阅
          resp = requests.get(BPB_SUB_URL, timeout=10)
          resp.raise_for_status()
          raw_yaml = resp.text

          # 解析 YAML
          data = yaml.safe_load(raw_yaml)

          # Clash YAML 节点通常在 proxies 字段
          nodes = data.get("proxies", [])
          if not nodes:
              raise ValueError("解析到的 proxies 列表为空，请检查订阅链接")

          # 清洗函数
          def clean_node(node):
              # 删除 Clash 不支持字段
              for key in ["packet-encoding", "ip-version", "tfo", "mptcp"]:
                  node.pop(key, None)
              # 修正 fingerprint
              if node.get("client-fingerprint") in ["random", "randomized"]:
                  node["client-fingerprint"] = "chrome"
              # servername 小写
              if "servername" in node and node["servername"]:
                  node["servername"] = node["servername"].lower()
              # cipher
              node["cipher"] = "none"
              # udp
              node["udp"] = True
              return node

          # 遍历清洗所有节点
          cleaned = []
          for node in nodes:
              if isinstance(node, dict):
                  cleaned.append(clean_node(node))
              else:
                  cleaned.append(node)  # 其他格式节点直接保留

          # 更新 proxies
          data["proxies"] = cleaned

          # 输出到 BPB.yaml
          with open("BPB.yaml", "w", encoding="utf-8") as f:
              yaml.dump(data, f, allow_unicode=True, sort_keys=False)

          print(f"✅ 清洗完成，生成 BPB.yaml，共 {len(cleaned)} 个节点")
          PYCODE

      - name: Push BPB.yaml to Gist
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gist_id: ${{ secrets.GIST_ID }}
          file_path: BPB.yaml
